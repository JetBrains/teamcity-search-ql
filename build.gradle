plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.8.22'
    id "com.github.rodm.teamcity-server" version "1.5"
    id 'antlr'
}

sourceCompatibility = "1.8"
targetCompatibility = "1.8"

ext {
    teamcityPluginVersion = project.hasProperty("PluginVersion") ? PluginVersion
            : "SNAPSHOT"
    teamcityVersion = project.hasProperty("TeamCityVersion") ? TeamCityVersion
            : "2025.03-SNAPSHOT"
    teamcityWebInf = project.hasProperty("TeamCityLibs") ? TeamCityLibs
            : "../../.idea_artifacts/web_deployment/WEB-INF"
    teamcityLibs = "$teamcityWebInf/lib"
    teamcityTestLibs = project.hasProperty("TeamCityTestLibs") ? TeamCityTestLibs
            : "../../.idea_artifacts/dist_openapi_integration/tests"

    teamcityRecipePluginPath = project.hasProperty("TeamCityRecipesPluginPath") ? TeamCityRecipesPluginPath
            : "../../recipes/recipes-webapp/target/teamcity/dist/recipes.zip"
    originalRecipePluginPath = teamcityRecipePluginPath
    if (teamcityRecipePluginPath.endsWith(".zip")) {
        teamcityRecipePluginPath = "${buildDir}/recipesPluginUnpacked" // prepareRecipesLibs task will unpack the zip into this folder
    }
}

group 'org.example'
version '1.0-SNAPSHOT'

repositories {
    if (project.hasProperty("maven.repo.local")) {
        maven {
            url project.property("maven.repo.local")
        }
    }
    mavenCentral()
}

dependencies {
    provided "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    antlr "org.antlr:antlr4:4.8"
    implementation "org.antlr:antlr4-runtime:4.8"
    implementation "org.jetbrains.kotlin:kotlin-reflect:1.8.22"
    provided "org.jetbrains.kotlin:kotlin-test:1.8.22"
    implementation "org.reflections:reflections:0.9.12"

    provided fileTree(dir: "$rootProject.ext.teamcityLibs", include: ['*.jar'])
    provided fileTree(dir: "$rootProject.ext.teamcityRecipePluginPath/server", include: ['*.jar'])
    testImplementation fileTree(dir: "$rootProject.ext.teamcityTestLibs", include: ['*.jar'])
    testImplementation("org.testng:testng:6.8")
}

configurations {
    api {
        extendsFrom = extendsFrom.findAll { it != configurations.antlr }
    }
}

test {
    useTestNG() {
        suites 'src/test/testng-query-lang.xml'
    }
}

compileKotlin {
    dependsOn('initializer')
    dependsOn('generateGrammarSource')
    kotlinOptions.jvmTarget = "1.8"
}

compileTestKotlin {
    dependsOn('initializer')
    dependsOn('generateTestGrammarSource')
    dependsOn('generateGrammarSource')
    kotlinOptions.jvmTarget = "1.8"
}

teamcity {
    version = teamcityVersion
    allowSnapshotVersions = true
    server {
        descriptor = file("teamcity-plugin.xml")
        tokens = [Version: teamcityPluginVersion]
        archiveName = "search-ql"
    }
}

generateGrammarSource {
    outputDirectory = file("src/main/java/jetbrains/buildServer/server/querylang/parser")
    arguments += ['-visitor', '-long-messages']
}


task initializer {
    dependsOn('prepareRecipesLibs')
    dependsOn('prepareFilterDescription')
}

task prepareRecipesLibs(type: Copy) {
    // prepare recipes dependency
    if (rootProject.ext.originalRecipePluginPath.endsWith("zip")) {
        from zipTree(rootProject.ext.originalRecipePluginPath)
        into rootProject.ext.teamcityRecipePluginPath

        outputs.dir rootProject.ext.teamcityRecipePluginPath
    }
}

task prepareFilterDescription(type: Copy) {
    from "FOR_USERS.md"
    into "src/main/resources/"
}

tasks.findByName('processResources').dependsOn('prepareFilterDescription')