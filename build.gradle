plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.3.72'
    id "com.github.rodm.teamcity-server" version "1.3"
    id 'antlr'
}

sourceCompatibility = "1.8"
targetCompatibility = "1.8"

ext {
    teamcityPluginVersion = project.hasProperty("PluginVersion") ? PluginVersion
            : "SNAPSHOT"
    teamcityVersion = project.hasProperty("TeamCityVersion") ? TeamCityVersion
            : "2020.1"
    teamcityWebInf = project.hasProperty("TeamCityLibs") ? TeamCityLibs
            : "../../.idea_artifacts/web-deployment/WEB-INF"
    teamcityLibs = "$teamcityWebInf/lib"
    teamcityTestLibs = project.hasProperty("TeamCityTestLibs") ? TeamCityTestLibs
            : "../../.idea_artifacts/dist_openapi_integration/tests"
    teamcityPluginLibs = "$teamcityWebInf/plugins/meta-runner/server"
}

group 'org.example'
version '1.0-SNAPSHOT'

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
}

dependencies {
    provided "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    antlr "org.antlr:antlr4:4.8"
    implementation "org.antlr:antlr4-runtime:4.8"
    implementation "org.jetbrains.kotlin:kotlin-reflect:1.3.72"
    provided "org.jetbrains.kotlin:kotlin-test:1.3.72"
    implementation "org.reflections:reflections:0.9.12"

    provided "org.jetbrains.teamcity:server-api:$rootProject.ext.teamcityVersion"
    provided fileTree(dir: "$rootProject.ext.teamcityLibs", include: ['*.jar'])
    provided fileTree(dir: "$rootProject.ext.teamcityPluginLibs", include: ['*.jar'])
    testImplementation fileTree(dir: "$rootProject.ext.teamcityTestLibs", include: ['*.jar'])
    testImplementation("org.testng:testng:6.8")
}

configurations {
    compile {
        extendsFrom = extendsFrom.findAll { it != configurations.antlr }
    }
}

test {
    useTestNG() {
        suites 'src/test/testng-query-lang.xml'
    }
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

teamcity {
    version = teamcityVersion
    server {
        descriptor = file("teamcity-plugin.xml")
        tokens = [Version: teamcityPluginVersion]
        archiveName = "search-ql"
    }
}

generateGrammarSource {
    outputDirectory = file("src/main/java/jetbrains/buildServer/server/querylang/parser")
    arguments += ['-visitor', '-long-messages']
}


task initializer(type: Copy) {
    from "FOR_USERS.md"
    into "src/main/resources/"
}

tasks.matching { it.name != 'initializer' }.all { Task task ->
    task.dependsOn initializer
}